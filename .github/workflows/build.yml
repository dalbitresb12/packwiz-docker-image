name: build

on:
  workflow_dispatch:
    inputs:
      force_push:
        type: boolean
        default: false
        description: Force building of image even if if that commit has already been pushed
  schedule:
    - cron: '0 0 * * *'

env:
  TARGET_REPOSITORY: 'packwiz/packwiz'
  IMAGE_NAMESPACE: 'dalbitresb12'
  IMAGE_NAME: 'packwiz'
  STATE_FILE: 'last-commit.txt'

jobs:
  check:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: read
    outputs:
      ref: ${{ steps.repo.outputs.ref }}
      build: ${{ steps.inspect.outputs.enable }}
    steps:
      - name: Get latest ${{ env.TARGET_REPOSITORY }} commit info
        id: repo
        run: |
          TARGET_REPOSITORY="${{ env.TARGET_REPOSITORY }}"
          DEFAULT_BRANCH="$(curl -s -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/$TARGET_REPOSITORY" | jq -r .default_branch)"
          HEAD_REF="$(curl -s -H "Accept: application/vnd.github.sha" -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/$TARGET_REPOSITORY/commits/$DEFAULT_BRANCH")"
          echo "Found hash for $TARGET_REPOSITORY on $DEFAULT_BRANCH: $HEAD_REF"
          echo "ref=$HEAD_REF" >> "$GITHUB_OUTPUT"
      - name: Get image name
        id: image
        run: echo "name=ghcr.io/${{ env.IMAGE_NAMESPACE }}/${{ env.IMAGE_NAME }}:packwiz-sha-${{ steps.repo.outputs.ref }}" >> "$GITHUB_OUTPUT"
      - name: Clone state branch
        uses: actions/checkout@v4
        with:
          ref: state
      - name: Inspect image and detect if this build is already pushed
        id: inspect
        run: |
          if [[ "${{ inputs.force_push }}" == "true" ]]; then
            echo "Force push was requested, enabling build..."
            echo "enable=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          if [ ! -f "${{ env.STATE_FILE }}" ]; then
            echo "Unable to find ${{ env.STATE_FILE }}, enabling build..."
            echo "enable=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          LAST_COMMIT=$(cat "${{ env.STATE_FILE }}" | tr -d '[:space:]')
          echo "Last commit saved to state: $LAST_COMMIT"

          if [[ "$LAST_COMMIT" != "${{ steps.repo.outputs.ref }}" ]]; then
            echo "Target repository has been updated, enabling build..."
            echo "enable=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          VERSION_LIST="$(curl -s -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/users/${{ env.IMAGE_NAMESPACE }}/packages/container/${{ env.IMAGE_NAME }}/versions?state=active")"
          HAS_CURRENT_REF="$(echo $VERSION_LIST | jq 'any(.[].metadata.container.tags; (index("latest") != null) and (index("packwiz-sha-${{ steps.repo.outputs.ref }}") != null))')"
          if [[ "$HAS_CURRENT_REF" == "true" ]]; then
            echo "Ref ${{ steps.repo.outputs.ref }} already exists, skipping build..."
            echo "enable=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # The rest shouldn't execute, but I'm leaving it here as a backup
          if ! docker pull ${{ steps.image.outputs.name }}; then
            echo "Unable to find image for this ref, enabling build..."
            echo "enable=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          IMAGE_INFO="$(docker inspect ${{ steps.image.outputs.name }})"
          REVISION="$(echo $IMAGE_INFO | jq -r .[0].Config.Labels.\"org.opencontainers.image.revision\")"
          echo "Image revision: $REVISION"
          if [[ "$REVISION" != "${{ github.sha }}" ]]; then
            echo "Image build repository contents have changed, enabling build..."
            echo "enable=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "Image revision and ref matches, build won't happen"
          echo "enable=false" >> "$GITHUB_OUTPUT"
  build:
    runs-on: ubuntu-latest
    needs: [check]
    if: fromJson(needs.check.outputs.build)
    permissions:
      contents: read
      actions: read
      packages: write
    steps:
      - name: Create image metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.IMAGE_NAMESPACE }}/${{ env.IMAGE_NAME }}
            ghcr.io/${{ env.IMAGE_NAMESPACE }}/${{ env.IMAGE_NAME }}
          tags: |
            type=schedule,pattern=nightly
            type=schedule,pattern={{date 'YYYY-MM-DD'}}
            type=raw,value=${{ needs.check.outputs.ref }},prefix=packwiz-sha-
          flavor: |
            latest=true
          labels: |
            org.opencontainers.image.title=packwiz-docker-image
            org.opencontainers.image.authors=dalbitresb12
            org.opencontainers.image.description=See more at https://github.com/dalbitresb12/packwiz-docker-image#readme.
            org.opencontainers.image.documentation=https://github.com/dalbitresb12/packwiz-docker-image#readme
            org.opencontainers.image.url=https://github.com/dalbitresb12/packwiz-docker-image#readme
            org.opencontainers.image.source=https://github.com/dalbitresb12/packwiz-docker-image
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            HEAD_REF=${{ needs.check.outputs.ref }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Clone state branch
        uses: actions/checkout@v4
        with:
          ref: state
      - name: Update state
        run: echo "${{ needs.check.outputs.ref }}" > "${{ env.STATE_FILE }}"
      - name: Push state
        uses: EndBug/add-and-commit@v9
        with:
          default_author: github_actions
          message: Updated state
    
