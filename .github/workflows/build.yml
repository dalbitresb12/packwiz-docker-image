name: build

on:
  workflow_dispatch:
    inputs:
      force_push:
        type: boolean
        default: false
        description: Force building of image even if if that commit has already been pushed
      dry_run:
        type: boolean
        default: false
        description: Test the workflow without making changes
      retag:
        type: boolean
        default: false
        description: Start retag job for specified upstream commit
      retag-sha:
        type: string
        description: Multi-platform manifest to use for retagging, in the format of sha256:<hash>
  schedule:
    - cron: '0 0 * * *'

env:
  TARGET_REPOSITORY: 'packwiz/packwiz'
  IMAGE_NAMESPACE: 'dalbitresb12'
  IMAGE_NAME: 'packwiz'
  IMAGE_UPSTREAM_SHA_PREFIX: 'packwiz-sha-'
  STATE_FILE: 'last-commit.txt'

jobs:
  check:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    outputs:
      ref: ${{ steps.repo.outputs.ref }}
      build: ${{ steps.inspect.outputs.enable == 'true' && 'true' || 'false' }}
      retag: ${{ steps.inspect.outputs.retag == 'true' && 'true' || 'false' }}
      retag-sha: ${{ steps.inspect.outputs.retag-sha }}
      dry_run: ${{ steps.dry_run.outputs.value == 'true' && 'true' || 'false' }}
    steps:
      - name: Get latest ${{ env.TARGET_REPOSITORY }} commit info
        id: repo
        run: |
          TARGET_REPOSITORY="${{ env.TARGET_REPOSITORY }}"
          DEFAULT_BRANCH="$(curl -s -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/$TARGET_REPOSITORY" | jq -r .default_branch)"
          HEAD_REF="$(curl -s -H "Accept: application/vnd.github.sha" -H "X-GitHub-Api-Version: 2022-11-28" -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/$TARGET_REPOSITORY/commits/$DEFAULT_BRANCH")"
          echo "Found hash for $TARGET_REPOSITORY on $DEFAULT_BRANCH: $HEAD_REF"
          echo "ref=$HEAD_REF" >> "$GITHUB_OUTPUT"
      - name: Detect if the latest upstream commit has already been built
        id: inspect
        run: |
          if [[ "${{ inputs.force_push }}" == "true" ]]; then
            echo "Force push was requested, enabling build..."
            echo "enable=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          if [[ "${{ inputs.retag }}" == "true" ]]; then
            echo "Forced retag was requested, starting retag job..."
            echo "retag=true" >> "$GITHUB_OUTPUT"
            echo "retag-sha=${{ inputs.retag-sha }}" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          if [ ! -f "${{ env.STATE_FILE }}" ]; then
            echo "Unable to find ${{ env.STATE_FILE }}, enabling build..."
            echo "enable=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          LAST_COMMIT=$(cat "${{ env.STATE_FILE }}" | tr -d '[:space:]')
          echo "Last commit saved to state: $LAST_COMMIT"

          if [[ "$LAST_COMMIT" != "${{ steps.repo.outputs.ref }}" ]]; then
            echo "Target repository has been updated, enabling build..."
            echo "enable=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          VERSION_LIST="$(curl -s -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/users/${{ env.IMAGE_NAMESPACE }}/packages/container/${{ env.IMAGE_NAME }}/versions")"
          HAS_CURRENT_REF="$(echo $VERSION_LIST | jq 'any(.[].metadata.container.tags; (index("latest") != null) and (index("${{ env.IMAGE_UPSTREAM_SHA_PREFIX }}${{ steps.repo.outputs.ref }}") != null))')"
          if [[ "$HAS_CURRENT_REF" == "true" ]]; then
            echo "Ref ${{ steps.repo.outputs.ref }} already exists and is set to latest, skipping build..."
            echo "enable=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          EXISTS_BUT_NOT_LATEST="$(echo $VERSION_LIST | jq 'any(.[].metadata.container.tags[]; . == "${{ env.IMAGE_UPSTREAM_SHA_PREFIX }}${{ steps.repo.outputs.ref }}")')"
          if [[ "$EXISTS_BUT_NOT_LATEST" == "true" ]]; then
            RETAG_SHA="$(echo $VERSION_LIST | jq -r '.[] | select(.metadata.container.tags | index("${{ env.IMAGE_UPSTREAM_SHA_PREFIX }}${{ steps.repo.outputs.ref }}") != null) | .name')"
            echo "Ref ${{ steps.repo.outputs.ref }} already exists but is not latest, starting retag job..."
            echo "retag=true" >> "$GITHUB_OUTPUT"
            echo "retag-sha=$RETAG_SHA" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # The rest shouldn't execute most times, but it should serve as a backup if the image is really old and isn't returned in the API response.
          # I highly doubt that would happen, but I already coded this so it doesn't hurt leaving it here.
          IMAGE_NAME="ghcr.io/${{ env.IMAGE_NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_UPSTREAM_SHA_PREFIX }}${{ steps.repo.outputs.ref }}"
          if ! docker pull "$IMAGE_NAME"; then
            echo "Unable to find image for this ref, enabling build..."
            echo "enable=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          IMAGE_INFO="$(docker inspect "$IMAGE_NAME")"
          REVISION="$(echo $IMAGE_INFO | jq -r .[0].Config.Labels.\"org.opencontainers.image.revision\")"
          echo "Image revision: $REVISION"
          if [[ "$REVISION" != "${{ github.sha }}" ]]; then
            echo "Image build repository contents have changed, enabling build..."
            echo "enable=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "Image revision and ref matches, build won't happen"
          echo "enable=false" >> "$GITHUB_OUTPUT"
      - name: Set dry run variable
        id: dry_run
        if: fromJson(steps.inspect.outputs.enable || steps.inspect.outputs.retag)
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "value=${{ inputs.dry_run }}" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          # Default to false when `inputs` is empty
          echo "value=false" >> "$GITHUB_OUTPUT"
  build:
    runs-on: ubuntu-latest
    needs: [check]
    if: fromJson(needs.check.outputs.build)
    permissions:
      contents: write
      packages: write
      actions: read
    steps:
      - name: Get repository name
        id: repo
        run: echo "name=$(echo "${{ github.repository }}" | cut -d'/' -f2)" >> "$GITHUB_OUTPUT"
      - name: Create image metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.IMAGE_NAMESPACE }}/${{ env.IMAGE_NAME }}
            ghcr.io/${{ env.IMAGE_NAMESPACE }}/${{ env.IMAGE_NAME }}
          tags: |
            type=schedule,pattern=nightly
            type=schedule,pattern={{date 'YYYY-MM-DD'}}
            type=raw,value=${{ needs.check.outputs.ref }},prefix=${{ env.IMAGE_UPSTREAM_SHA_PREFIX }}
          flavor: |
            latest=true
          labels: |
            org.opencontainers.image.title=${{ steps.repo.outputs.name }}
            org.opencontainers.image.authors=${{ github.repository_owner }}
            org.opencontainers.image.description=See more at https://github.com/${{ github.repository }}#readme.
            org.opencontainers.image.documentation=https://github.com/${{ github.repository }}#readme
            org.opencontainers.image.url=https://github.com/${{ github.repository }}#readme
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          push: ${{ !fromJson(needs.check.outputs.dry_run) }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            HEAD_REF=${{ needs.check.outputs.ref }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Clone state branch
        uses: actions/checkout@v4
        with:
          ref: state
      - name: Update state
        run: echo "${{ needs.check.outputs.ref }}" > "${{ env.STATE_FILE }}"
      - name: Push state
        if: ${{ !fromJson(needs.check.outputs.dry_run) }}
        uses: EndBug/add-and-commit@v9
        with:
          default_author: github_actions
          message: Updated state
  retag:
    runs-on: ubuntu-latest
    needs: [check]
    if: fromJson(needs.check.outputs.retag)
    permissions:
      contents: write
      packages: write
    steps:
      - name: Fail if retag doesn't start with sha256
        if: ${{ !startsWith(needs.check.outputs.retag-sha, 'sha256:') }}
        env:
          MANIFEST_SHA: ${{ needs.check.outputs.retag-sha }}
        run: |
          echo "Invalid manifest SHA: $MANIFEST_SHA"
          exit 1
      - name: Create image metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.IMAGE_NAMESPACE }}/${{ env.IMAGE_NAME }}
            ghcr.io/${{ env.IMAGE_NAMESPACE }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=nightly
            type=raw,value={{date 'YYYY-MM-DD'}}
            type=raw,value=${{ needs.check.outputs.ref }},prefix=${{ env.IMAGE_UPSTREAM_SHA_PREFIX }}
          flavor: |
            latest=true
          sep-tags: ','
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Retag with buildx
        env:
          IMAGE_TAGS: ${{ steps.meta.outputs.tags }}
          SOURCE_IMAGE_NAME: 'ghcr.io/${{ env.IMAGE_NAMESPACE }}/${{ env.IMAGE_NAME }}@${{ needs.check.outputs.retag-sha }}'
        run: |
          IFS=',' read -r -a tags_array <<< "$IMAGE_TAGS"

          for tag in "${tags_array[@]}"; do
            if [[ "${{ needs.check.outputs.dry_run }}" == "true" ]]; then
              echo "Dry run: would've retagged $SOURCE_IMAGE_NAME to $tag"
            else
              docker buildx imagetools create "$SOURCE_IMAGE_NAME" -t "$tag"
            fi
          done
      - name: Clone state branch
        uses: actions/checkout@v4
        with:
          ref: state
      - name: Update state
        run: echo "${{ needs.check.outputs.ref }}" > "${{ env.STATE_FILE }}"
      - name: Push state
        if: ${{ !fromJson(needs.check.outputs.dry_run) }}
        uses: EndBug/add-and-commit@v9
        with:
          default_author: github_actions
          message: Updated state
